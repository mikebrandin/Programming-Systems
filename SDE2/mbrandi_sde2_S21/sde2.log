NOTE:   Log file was copy and pasted from online compiler output as permitted by instructor. 
        There were no compilation errors given upon compilation and if there were they would be shown below. 

let rec in_list = function 
    (list, i) ->
      if (list = []) then false 
      else if (i = List.hd list) then true
      else in_list(List.tl list, i) ;;
val in_list : 'a list * 'a -> bool = <fun>
let rec first_duplicate = function
    (list) -> 
      if (list = []) then -10000
      else if in_list(List.tl list, List.hd list) then List.hd list
      else first_duplicate(List.tl list) ;;
val first_duplicate : int list -> int = <fun>
let rec not_in_list = function 
    ([], list2) -> -10000
  | (h::t, list2) -> 
      if not (List.mem h t || List.mem h list2) then h 
      else not_in_list(t, h::list2) ;;
val not_in_list : int list * int list -> int = <fun>
let rec first_nonrepeating = function
    (list) -> 
      not_in_list(list, []) ;;
val first_nonrepeating : int list -> int = <fun>
let rec sumOfTwo_helper = function 
    (list1, [], v) -> false
  | (list1, list2, v) ->
      if (List.hd list1 + List.hd list2 = v) then true
      else sumOfTwo_helper(list1, List.tl list2, v) ;;
val sumOfTwo_helper : int list * int list * int -> bool = <fun>
let rec sumOfTwo = function
    ([], [], v) -> false
  | ([], list2, v) -> false
  | (list1, list2, v) ->
      if sumOfTwo_helper(list1, list2, v) then true
      else sumOfTwo(List.tl list1, list2, v) ;;
val sumOfTwo : int list * int list * int -> bool = <fun>
let rec cyk_helper = function 
    (max, i, list) -> 
      if ((i - max) > 0) 
      then cyk_helper(max+1, i, (abs(i-max), max)::list)
      else list ;;
val cyk_helper : int * int * (int * int) list -> (int * int) list = <fun>
let rec cyk_sublists = function
    (n) -> cyk_helper(1, n, []) ;;
val cyk_sublists : int -> (int * int) list = <fun>
first_duplicate [1;2;3;4;5;6;7;4;5;8;9];;
- : int = 4
first_duplicate [1;2;3;4;5;6;7;4;5;2;9];;
- : int = 2
first_duplicate [1;2;3;4;5;6;7;8;9;10];;
- : int = -10000
first_nonrepeating [1;2;3;2;7;5;6;1;3];;
- : int = 7
first_nonrepeating [1;2;9;3;2;7;5;6;1;3];;
- : int = 9
first_nonrepeating [1;2;9;3;2;7;5;6;10;30];;
- : int = 1
first_nonrepeating [1;2;9;3;2;7;5;6;1;10;30];;
- : int = 9
first_nonrepeating [1;2;9;3;2;7;5;9;6;1;10;30];;
- : int = 3
first_nonrepeating [1;2;3;2;7;5;6;1;3];;
- : int = 7
first_nonrepeating [1;2;3;4;5;1;2;3;4;5];;
- : int = -10000
first_nonrepeating [1;2;3;4;5;1;2;3;4;9];;
- : int = 5
first_nonrepeating [1;1;1;2;2;2];;
- : int = -10000
sumOfTwo([1;2;3],[10;20;30;40],42);;
- : bool = true
sumOfTwo([1;2;3],[10;20;30;40],40);;
- : bool = false
sumOfTwo([1;2;3],[10;20;30;40],41);;
- : bool = true
sumOfTwo([1;2;3],[10;20;30;40],43);;
- : bool = true
sumOfTwo([1;2;3],[10;20;30;40],44);;
- : bool = false
sumOfTwo([1;2;3],[10;20;30;40],11);;
- : bool = true
sumOfTwo([1;2;3],[10;20;30;40],15);;
- : bool = false
cyk_sublists 4;;
- : (int * int) list = [(1, 3); (2, 2); (3, 1)]
cyk_sublists 3;;
- : (int * int) list = [(1, 2); (2, 1)]
cyk_sublists 5;;
- : (int * int) list = [(1, 4); (2, 3); (3, 2); (4, 1)]
cyk_sublists(6);;
- : (int * int) list = [(1, 5); (2, 4); (3, 3); (4, 2); (5, 1)]